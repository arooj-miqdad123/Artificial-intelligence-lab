import heapq

class PuzzleState:
    def __init__(self, board, parent=None, g=0):
        self.board = board
        self.parent = parent
        self.g = g
        self.h = self.calculate_heuristic()
        self.f = self.g + self.h

    def __lt__(self, other):
        return self.f < other.f

    def __eq__(self, other):
        return self.board == other.board

    def __hash__(self):
        return hash(str(self.board))

    def calculate_heuristic(self):
        misplaced_tiles = 0
        goal_board = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0 and self.board[i][j] != goal_board[i][j]:
                    misplaced_tiles += 1
        return misplaced_tiles

    def get_neighbors(self):
        neighbors = []
        empty_i, empty_j = self.find_empty()
        
        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]

        for di, dj in moves:
            new_i, new_j = empty_i + di, empty_j + dj
            if 0 <= new_i < 3 and 0 <= new_j < 3:
                new_board = [row[:] for row in self.board]
                new_board[empty_i][empty_j], new_board[new_i][new_j] = new_board[new_i][new_j], new_board[empty_i][empty_j]
                neighbors.append(PuzzleState(new_board, parent=self, g=self.g + 1))
        return neighbors

    def find_empty(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j

def solve_8_puzzle(start_board):
    start_state = PuzzleState(start_board)
    goal_state = PuzzleState([[1, 2, 3], [4, 5, 6], [7, 8, 0]])

    open_set = [start_state]
    closed_set = set()

    while open_set:
        current_state = heapq.heappop(open_set)

        if current_state == goal_state:
            path = []
            while current_state:
                path.append(current_state.board)
                current_state = current_state.parent
            return path[::-1]

        closed_set.add(current_state)

        for neighbor in current_state.get_neighbors():
            if neighbor in closed_set:
                continue
            
            heapq.heappush(open_set, neighbor)
    
    return None

if __name__ == "__main__":
    start_board = [
        [1, 2, 3],
        [0, 4, 6],
        [7, 5, 8]
    ]

    solution_path = solve_8_puzzle(start_board)

    if solution_path:
        print("Solution found!")
        for step, board in enumerate(solution_path):
            print(f"--- Step {step} ---")
            for row in board:
                print(row)
    else:
        print("No solution found for this puzzle.")
