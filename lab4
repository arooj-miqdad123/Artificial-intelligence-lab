# Stack
class Stack:
    def __init__(self):
        self.stack = []

    def push(self, item):
        self.stack.append(item)
        print(f"Pushed: {item}")

    def pop(self):
        if not self.is_empty():
            return self.stack.pop()
        return "Stack is empty"

    def peek(self):
        if not self.is_empty():
            return self.stack[-1]
        return "Stack is empty"

    def is_empty(self):
        return len(self.stack) == 0

    def display(self):
        print("Stack:", self.stack)

# Example
s = Stack()
s.push(10)
s.push(20)
s.display()
print("Popped:", s.pop())
s.display()


#Queue

class Queue:
    def __init__(self):
         self.queue = []

    def enqueue(self, item):
        self.queue.append(item)
        print(f"Enqueued: {item}")

    def dequeue(self):
        if not self.is_empty():
            return self.queue.pop(0)
        return "Queue is empty"

    def peek(self):
        if not self.is_empty():
            return self.queue[0]
        return "Queue is empty"

    def is_empty(self):
        return len(self.queue) == 0

    def display(self):
        print("Queue:", self.queue)

# Example
q = Queue()
q.enqueue(5)
q.enqueue(15)
q.display()
print("Dequeued:", q.dequeue())
q.display()

# binary search

def binary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return f"Element found at index {mid}"
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return "Element not found"

# Example
arr = [2, 4, 6, 8, 10, 12, 14]
target = 10
print(binary_search(arr, target))
