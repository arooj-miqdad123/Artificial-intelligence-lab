tree = {
    'A': ['B', 'F', 'D', 'E'],
    'B': ['K', 'J'],
    'F': [],
    'D': ['G', 'C'],
    'E': ['H', 'I'],
    'K': ['N', 'M'],
    'J': [],
    'G': [],
    'C': [],
    'H': [],
    'I': ['L'],
    'N': [],
    'M': [],
    'L': []
}

def get_children(node):
    return tree.get(node, [])

def depth_limited_search(node, goal, limit, path=[]):
    path = path + [node]
    
    if node == goal:
        return path
    
    if limit <= 0:
        return None
    
    for child in get_children(node):
        result = depth_limited_search(child, goal, limit - 1, path)
        if result is not None:
            return result
    
    return None

def ids_search(start_node, goal_node, max_depth=10):
    for depth in range(max_depth + 1):
        print(f"\nSearching with depth limit = {depth}")
        
        result = depth_limited_search(start_node, goal_node, depth)
        
        if result:
            print(f"Goal {goal_node} found at depth {depth}!")
            return result
            
    return None

start_node = 'A'
goal_node = 'G'
ids_result = ids_search(start_node, goal_node)

if ids_result:
    print(f"\nFinal path: {' -> '.join(ids_result)}")
else:
    print("\nPath not found.")
